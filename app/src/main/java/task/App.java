/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task;

import org.apache.commons.io.FileUtils;

import java.io.*;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class App {
    private int MAX_DEPTH;
    private int MAX_URLS_PER_PAGE;
    private boolean CROSS_LEVEL_UNIQUENESS;
    private final String BASE_DIR = "output";
    private final int N_THREADS = 5;

    private final Set<String> visitedUrls = ConcurrentHashMap.newKeySet();
    private final Queue<UrlDepthPair> queue = new ConcurrentLinkedQueue<>();
    private final ExecutorService executor = Executors.newFixedThreadPool(N_THREADS);

    public App(String startUrl, int maxDepth, int maxUrlsPerPage, boolean crossLevelUniqueness) {
        queue.add(new UrlDepthPair(startUrl, 0));
        MAX_DEPTH = maxDepth;
        MAX_URLS_PER_PAGE = maxUrlsPerPage;
        CROSS_LEVEL_UNIQUENESS = crossLevelUniqueness;
    }

    public void startDigging() throws IOException {
        FileUtils.deleteDirectory(new File(BASE_DIR));
        while (!queue.isEmpty()) {
            UrlDepthPair pair = queue.poll();
            if (pair.depth <= MAX_DEPTH && visitedUrls.size() < MAX_URLS_PER_PAGE) {
                executor.submit(() -> digDown(pair));
            }
        }
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void digDown(UrlDepthPair pair) {
        String url = pair.url;
        int depth = pair.depth;
        if (!visitedUrls.add(url)) {
            return;
        }

        WebPage webPage = downloadHtml(url);
        saveHtmlToFile(webPage, depth, url);

        if (depth <= MAX_DEPTH) {
            List<String> extractedUrls = extractUrls(webPage);
            int urlsAdded = 0;
            for (String extractedUrl : extractedUrls) {
                if (visitedUrls.size() >= MAX_URLS_PER_PAGE) {
                    break;
                }
                if ((CROSS_LEVEL_UNIQUENESS || !visitedUrls.contains(extractedUrl)) && urlsAdded < Math.pow(MAX_URLS_PER_PAGE, (depth+1))) {
                    queue.add(new UrlDepthPair(extractedUrl, depth + 1));
                    urlsAdded++;
                }
            }

            for (int i = 0; i < MAX_URLS_PER_PAGE && !queue.isEmpty(); i++) {
                UrlDepthPair nextPair = queue.poll();
                digDown(nextPair);
            }
        }
    }


    private WebPage downloadHtml(String url) {
        try {
            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            CookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }
                    return new WebPage(url, response.toString());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new WebPage(url, "");
    }

    private List<String> extractUrls(WebPage webPage) {
        List<String> urls = new ArrayList<>();
        Pattern pattern = Pattern.compile("href=['\"](https?://[^'\"]+)['\"]");
        Matcher matcher = pattern.matcher(webPage.getContent());
        while (matcher.find()) {
            String curr = matcher.group(1);
            if (CROSS_LEVEL_UNIQUENESS) {
                if (!visitedUrls.contains(curr))
                    urls.add(curr);
            } else {
                urls.add(curr);
            }
        }
        return urls;
    }

    private void saveHtmlToFile(WebPage webPage, int depth, String url) {
        String safeUrl = url.replaceAll("[^a-zA-Z0-9.-]+", "_");
        String fileName = depth + "/" + safeUrl + ".html";
        System.out.println(fileName);
        File file = new File(BASE_DIR, fileName);
        file.getParentFile().mkdirs();
        try (PrintWriter writer = new PrintWriter(file, StandardCharsets.UTF_8)) {
            writer.write(webPage.getContent());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws IOException {
        if (args.length != 4) {
            System.out.println("Usage: java App <startUrl> <maxDepth> <maxUrlsPerPage> <crossLevelUniqueness>");
            System.exit(1);
        }
        String startUrl = args[0];
        int maxDepth = Integer.parseInt(args[1]);
        int maxUrlsPerPage = Integer.parseInt(args[2]);
        boolean crossLevelUniqueness = Boolean.parseBoolean(args[3]);

        App app = new App(startUrl, maxDepth, maxUrlsPerPage, crossLevelUniqueness);
        app.startDigging();
    }
}